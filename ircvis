#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use DateTime;
use Image::Magick;
use List::Util qw(min max);
use Storable qw(nstore retrieve);
use URI;

use Data::Dump;

sub magick {
	my $x = $_[0];

	if ($x and !ref($x)) {
		die("Magick error: $x");
	}

	return $x;
}

my $nick = shift or die("Usage: $0 <nick>\n");

my %month_map = (
	Jan => '01',
	Feb => '02',
	Mar => '03',
	Apr => '04',
	May => '05',
	Jun => '06',
	Jul => '07',
	Aug => '08',
	Sep => '09',
	Oct => '10',
	Nov => '11',
	Dec => '12',
);

my %state;

my @matches = (
	qr{
		^
		(?<year> ... ) -
		(?<month> .. ) -
		(?<day> .. ) -
		\s
		(?<hour> .. ) :
		(?<minute> .. ) : ..
		\s
		(?: < . | \s \* \s )
		(?<nick> $nick )
		[> ]
	}x,
	qr{
		^
		(?<hour> ..) : (?<minute> ..)
		(?: : .. | )
		\s
		(?: < . \s* | \s \* \s )
		(?<nick> $nick )
		[> ]
	}x,
	qr{
		^
		--- \s Log \s opened \s
		\S+ \s (?<amonth> ...) \s (?<day> ..) \s
		..:..:.. \s (?<year> ....)
	}x,
	qr{
		^
		--- \s
		Day \s changed \s \S+ \s
		(?<amonth> ...) \s (?<day> ..) \s (?<year> ....)
	}x,
);

my $y_clamp = 5;
my $hour_rot = 5;

my %data;

sub process_line {
	my ($line) = @_;

	for my $re (@matches) {
		$line =~ $re or next;

		for my $key (qw(year month day hour minute)) {
			if ($+{$key}) {
				$state{$key} = $+{$key};
			}
		}
		if ($+{amonth}) {
			$state{month} = $month_map{$+{amonth}};
		}

		if ($+{nick}) {
			$data{"$state{year}$state{month}$state{day}"}
				->{int(($state{hour} * 60 + $state{minute}) / $y_clamp *
				$y_clamp)} = 1;
		}
	}
}

if (1) {
	my ($year, $month, $day, $hour, $minute);
	while (my $line = <STDIN>) {
		process_line($line);
	}
	nstore \%data, "fnord.stor";
} else {
	%data = %{retrieve "fnord.stor"};
}

# define start/end times
my ($start_y, $start_m) = (min keys %data) =~ /^(....)(..)/;
my ($end_y,   $end_m  ) = (max keys %data) =~ /^(....)(..)/;

my $start = DateTime->new(
	year      => $start_y,
	month     => $start_m,
	day       => 1,
	time_zone => "UTC",
);
my $end = DateTime->last_day_of_month(
	year      => $end_y,
	month     => $end_m,
	time_zone => "UTC",
);

my $num_days = $end->delta_days($start)->in_units("days");

# create image!
my $axis_size = 50;
my $data_scale_xy = 3;
my $sx = $num_days * $data_scale_xy;
my $sy = 24 * 60 / $y_clamp * $data_scale_xy;

my $im = magick(Image::Magick->new(size => "${sx}x${sy}"));
magick($im->Read("xc:white"));

my $im_x = magick(Image::Magick->new(size => "${sx}x${axis_size}"));
magick($im_x->Read("xc:white"));

my $im_y = magick(Image::Magick->new(size => "${axis_size}x${sy}"));
magick($im_y->Read("xc:white"));

for my $hour (0..23) {
	my $dy = (($hour - $hour_rot) % 24) * 60 / $y_clamp * $data_scale_xy;

	magick($im_y->Draw(
		primitive => "line",
		points => "0,$dy $axis_size,$dy",
		stroke => "black",
	));

	magick($im_y->Annotate(
		text => "$hour:00",
		x => 4,
		y => $dy + 12,
	));
}

# walk!

my $off = 0;
my $current = $start->clone();
while ($current <= $end) {
	my $dx = $off * $data_scale_xy;
	if ($current->day == 1) {
		print STDERR sprintf("%04d-%02d...\n", $current->year, $current->month);

		magick($im_x->Draw(
			primitive => "line",
			points => "$dx,0 $dx,$axis_size",
			stroke => "black",
		));

		magick($im_x->Annotate(
			text => $current->strftime("%Y-%m"),
			x => $dx + 4,
			y => $axis_size / 2,
		));
	}

	for my $hour (keys %{$data{$current->strftime("%Y%m%d")}}) {
		my $nt = ($hour - $hour_rot * 60) % (24 * 60);
		my $dy = int($nt / $y_clamp) * $data_scale_xy;
		magick($im->Draw(
			primitive => "rectangle",
			fill => "black",
			points => sprintf("%d,%d %d,%d",
				$dx,
				$dy,
				$dx + $data_scale_xy - 1,
				$dy + $data_scale_xy - 1,
			),
		));
	}

	$current->add(days => 1);
	$off++;
}

# write images
my %uris;
my $u = URI->new("data:");
$u->media_type("image/png");

$u->data($im->ImageToBlob(magick => "png"));
$uris{data} = "$u";

$u->data($im_x->ImageToBlob(magick => "png"));
$uris{xaxis} = "$u";

$u->data($im_y->ImageToBlob(magick => "png"));
$uris{yaxis} = "$u";

# write html

my $html = <<'EOF';
<!DOCTYPE html>
<html>

<head>
<meta charset="UTF-8">
<title>ircvis</title>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>
<script type="text/javascript"><!--

var i_x = "__X_AXIS__";
var i_y = "__Y_AXIS__";
var i_d = "__DATA__";

$(window).scroll(function () {
	$("#xaxis").css({ top  : $(this).scrollTop() });
	$("#yaxis").css({ left : $(this).scrollLeft() });
});

$(window).mousemove(function (e) {
	$("#xmarker").css({ left : e.clientX });
	$("#ymarker").css({ top  : e.clientY });
});

$(function () {
	$("body").append($("<div id=\"data\"  />").append($("<img>").attr("src", i_d)));
	$("body").append($("<div id=\"xaxis\" />").append($("<img>").attr("src", i_x)));
	$("body").append($("<div id=\"yaxis\" />").append($("<img>").attr("src", i_y)));

	$("#xaxis, #yaxis, #data").css({ position : "absolute", top : "50px", left : "50px", });

	$("body").append($("<div id=\"xmarker\" />").css({ position : "fixed", top  : 0, width : 1, height : 50, backgroundColor : "black" }));
	$("body").append($("<div id=\"ymarker\" />").css({ position : "fixed", left : 0, width : 50, height : 1, backgroundColor : "black" }));

	$(window).scroll();
});

--></script>

</head>

<body>
</body>

</html>
EOF

$html =~ s/__X_AXIS__/$uris{xaxis}/;
$html =~ s/__Y_AXIS__/$uris{yaxis}/;
$html =~ s/__DATA__/$uris{data}/;

print $html;
